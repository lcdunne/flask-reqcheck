name: Code formatting & tests

on: pull_request

jobs:
  check_formatting:
    name: Check formatting ‚òëÔ∏è
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install -e '.[dev]'

      - name: Run Black
        run: |
          source venv/bin/activate
          black --check .

      - name: Run isort
        run: |
          source venv/bin/activate
          isort --check-only .

  run_tests:
    name: Run tests üß™
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install -e '.[dev]'

      - name: Run tests
        run: |
          source venv/bin/activate
          pytest -v -x --junitxml=report.xml

      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: report.xml

  check-version:
    name: Check version tag üè∑Ô∏è
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.base.ref == 'main' }}

    steps:
      - name: Checkout base branch and PR code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.base.ref }}
          path: base

      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          path: pr

      - name: Extract version from base branch pyproject.toml
        id: extract_base_version
        run: |
          base_version=$(grep '^version =' base/pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "::set-output name=base_version::$base_version"

      - name: Extract version from PR branch pyproject.toml
        id: extract_pr_version
        run: |
          pr_version=$(grep '^version =' pr/pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "::set-output name=pr_version::$pr_version"

      - name: Compare versions using Python
        run: |
          base_version="${{ steps.extract_base_version.outputs.base_version }}"
          pr_version="${{ steps.extract_pr_version.outputs.pr_version }}"

          python - <<EOF
          import sys
          from packaging import version

          base_version = version.parse("$base_version")
          pr_version = version.parse("$pr_version")

          if pr_version <= base_version:
              print(f"Invalid version bump ({pr_version} <= {base_version})")
              sys.exit(1)
          else:
              print(f"Valid version bump ({pr_version} > {base_version})")
          EOF
